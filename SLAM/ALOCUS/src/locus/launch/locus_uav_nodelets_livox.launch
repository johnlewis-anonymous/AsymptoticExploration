<launch>
 
    <arg name="robot_namespace" default="$(env UAV_NAME)"/>
    <arg name="rgbd_enabled" default="false"/>
    

    <arg name="use_gdb" default="true"/>
    <arg name="nodelet_manager" default="$(env UAV_NAME)_nodelet_manager" />
    <!-- <arg name="nodelet_manager" value="nodelet_locus"/> -->
    <arg name="standalone" value="false"/>
    <arg name="launch_prefix" value="gdb -ex run --args" if="$(arg use_gdb)"/>
    <arg name="launch_prefix" value="" unless="$(arg use_gdb)"/>
    <arg name="nodelet_args" value="--no-bond"/>
    <arg name="respawn" value="false" if="$(arg use_gdb)"/>
    <arg name="respawn" value="true" unless="$(arg use_gdb)"/>
    <arg name="robot_type" default="f550"/> 
    <arg name="config_pcl_filter_ouster" default="$(find locus)/triggers/single_uav_locus/config/ouster_filter_mapping.yaml"/> 
    

    

    <!-- <arg name="pc_topic" default="os_cloud_nodelet/points"/> -->
    <arg name="pc_topic" default="livox/lidar"/>
    <!-- <arg name="pc_topic" default="os_cloud_nodelet/points" unless="$(arg rgbd_enabled)"/> -->
    <!-- <arg name="pc_topic" default="rgbd_velodyne_points" if="$(arg rgbd_enabled)"/> -->
    
    <arg name="number_of_velodynes" default="1" />
    <arg name="b_use_multiple_pc" value="$(eval arg('number_of_velodynes') > 1)"/>
    <arg name="pc_input" value="locus_input"/>

    <!-- 0:TOP, 1:FRONT, 2:REAR -->
    <arg name="pc_trans_in_0" default="$(arg pc_topic)/transformed"/>
    <arg name="pc_trans_in_1" default="velodyne_front/$(arg pc_topic)/transformed"/>
    <arg name="pc_trans_in_2" default="velodyne_rear/$(arg pc_topic)/transformed"/>

    <group ns="$(arg robot_namespace)">
        <!-- Load parameters -->
        <rosparam file="$(find locus)/config/body_filter_params_$(arg robot_type).yaml"
                    subst_value="true"/>

        <!-- Load robot description -->
        <!-- <include file="$(find locus)/launch/robot_description.launch">
            <arg name="robot_namespace" value="$(arg robot_namespace)"/>
        </include> -->
        <!-- <node
            pkg="locus"
            name="locus"
            type="locus_node"
            output="screen"> -->
   
        <node pkg="nodelet" type="nodelet" name="locus" 
            args="load locus/LocusNodelet $(arg nodelet_manager)" 
            output="screen" 
            respawn="$(arg respawn)">


            <remap from="~LIDAR_TOPIC" to="locus/input"/>

            <remap from="~ODOMETRY_TOPIC" to="odometry/odom_main"/>  
            <!-- WARNING : GPU RAY IS ON  -->
            <!-- If changing odometry topic, change the frame by using rostopic parent frame in lo_frames_uav.yaml  -->

            <remap from="~IMU_TOPIC" to="mavros/imu/data"/>            
            <remap from="~POSE_TOPIC" to="not_currently_used"/>

            <remap from="~SPACE_MONITOR_TOPIC" to="localizer_space_monitor/xy_cross_section"/>

            <!-- For Sim -->
            <!-- <remap from="~ODOMETRY_TOPIC" to="wheel_odom"/> -->         

            <remap from="/diagnostics" to="hero/diagnostics"/>

            <param name="robot_name" value="$(arg robot_namespace)"/>
            <param name="tf_prefix" value="$(arg robot_namespace)"/>

            <param name="b_integrate_interpolated_odom" value="true"/>

            <rosparam file="$(find locus)/config/lo_settings.yaml" />

            <param name="b_pub_odom_on_timer" value="false" />

            <rosparam file="$(find locus)/config/lo_frames_uav.yaml" subst_value="true"/>
            <rosparam file="$(find point_cloud_filter)/config/parameters.yaml"/>
            <rosparam file="$(find point_cloud_odometry)/config/parameters.yaml"/>          
            <rosparam file="$(find point_cloud_localization)/config/parameters.yaml" unless="$(eval robot_type == 'spot')"/>
            <rosparam file="$(find point_cloud_mapper)/config/parameters.yaml"/>

            <param name="localization/num_threads" value="1" />
            <param name="icp/num_threads"          value="1" />
            <param name="mapper/num_threads"       value="2" />

        </node>

        <!-- <node pkg="locus" name="sensors_health_monitor" type="sensors_health_monitor.py" output="screen" if="$(eval number_of_velodynes > 1)"> 
            <remap from="failure_detection" to="point_cloud_merger_lo/failure_detection"/>
            <remap from="resurrection_detection" to="point_cloud_merger_lo/resurrection_detection"/>
        </node> -->

        <node pkg="nodelet"
            type="nodelet"
            name="transform_points_base_link"
            args="standalone pcl/PassThrough">
            <remap from="~input" to="$(arg pc_topic)"/>
            <remap from="~output" to="$(arg pc_trans_in_0)"/>
            <rosparam subst_value="true">
                filter_field_name: z
                filter_limit_min: -10
                filter_limit_max: 10
                leaf_size : 1
                output_frame: $(arg robot_namespace)/fcu
            </rosparam>
        </node> 
        
        <node pkg="nodelet"
              type="nodelet"
              name="body_filter"
              args="load point_cloud_filter/BodyFilter $(arg nodelet_manager) $(arg nodelet_args)"
              respawn="$(arg respawn)">
          <remap from="~input" to="$(arg pc_trans_in_0)" unless="$(arg b_use_multiple_pc)"/>
        </node>


        <node pkg="nodelet" type="nodelet" name="voxel_grid" args="load pcl/VoxelGrid $(arg nodelet_manager)" output="screen" respawn="true">
            <remap from="~input" to="body_filter/output" />
            <rosparam>
                filter_limit_min: -10
                filter_limit_max: 10
                leaf_size: 0.1
            </rosparam>
        </node>

        <node pkg="nodelet"
            type="nodelet"
            name="normal_computation"
            args="load point_cloud_filter/NormalComputation $(arg nodelet_manager) $(arg nodelet_args)"
            respawn="$(arg respawn)">
            <remap from="~input" to="voxel_grid/output"/>
            <remap from="~output" to="locus/input" />            
           <param name="num_threads"                value="4" />  
        </node>

    </group>
</launch>
